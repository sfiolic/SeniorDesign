#include <OneWire.h>
#include <DallasTemperature.h>
#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_TFTLCD.h> // Hardware-specific library
#include <TouchScreen.h>
#include <Wire.h>
#include <RTClib.h>


RTC_DS1307 rtc;
char daysOfTheWeek[7][7] = {"Sun", "Mon", "Tue", "Wed", "Thur", "Fri", "Sat"};


#if defined(__SAM3X8E__)
    #undef __FlashStringHelper::F(string_literal)
    #define F(string_literal) string_literal
#endif

#define  BLACK   0x0000
#define  BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define  WHITE   0xFFFF


#define YP A3  // must be an analog pin, use "An" notation!
#define XM A2  // must be an analog pin, use "An" notation!
#define YM 23   // can be a digital pin
#define XP 22   // can be a digital pin

#define TS_MINX 150
#define TS_MINY 120
#define TS_MAXX 920
#define TS_MAXY 940

// For better pressure precision, we need to know the resistance
// between X+ and X- Use any multimeter to read it
// For the one we're using, its 300 ohms across the X plate
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);

#define LCD_CS A3
#define LCD_CD A2
#define LCD_WR A1
#define LCD_RD A0
// optional
#define LCD_RESET A4

// Data wire is plugged into digital pin 10 on the Arduino
#define ONE_WIRE_BUS 10

// Setup a oneWire instance to communicate with any OneWire device
OneWire oneWire(ONE_WIRE_BUS);  

// Pass oneWire reference to DallasTemperature library
DallasTemperature sensors(&oneWire);


//last recorded temp
int temperatureFLast = 0; 


//set current temp
int setCurrentTemp = 78;

//display HVAC settings
int displayHVAC = 1;

//display set temp
int displaySetTemp = 1;

//HVAC current setting
int currentHVAC = 0;

//display settings
int displaySettings = 1;

//options menu
int optionsMenu = 0; 

//settings page text only appears once
int settingsPage = 1;

//show current temp
int showCurrTemp = 0;

//show time
int displayTime  = 1;

//last hour
int prevHour;

//last min
int prevMin;

//setting time
int settingTime = 1;

//Displays the set points
int displaySetPoints=1;

//Weekday set points
int tempWeekday1[3] = {72, 7, 45};
int tempWeekday2[3] = {72, 10, 15};
int tempWeekday3[3] = {72, 14, 30};
int tempWeekday4[3] = {72, 17, 10};

//Weekend set points
int tempWeekend1[3] = {72, 7, 45};
int tempWeekend2[3] = {72, 10, 15};
int tempWeekend3[3] = {72, 14, 30};
int tempWeekend4[3] = {72, 17, 10};

int checkPoint1 = 0;
int checkPoint2 = 0;
int checkPoint3 = 0;
int checkPoint4 = 0;
int checkPoint5 = 0;
int checkPoint6 = 0;
int checkPoint7 = 0;
int checkPoint8 = 0;

int displayViewPoints = 1;

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);

void setup() {
  
  Serial.begin(57600);
  if (! rtc.begin()) {
    Serial.println("Couldn't find RTC");
    while (1);
  }
  if (! rtc.isrunning()) {
    Serial.println("RTC is NOT running!");
    // following line sets the RTC to the date & time this sketch was compiled
    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }
  
  // put your setup code here, to run once:
  tft.reset();
  uint16_t identifier = tft.readID();
  tft.begin(identifier);

  tft.fillScreen(BLACK);

  pinMode(13, OUTPUT);
  //blue led
  pinMode(11, OUTPUT);
  //red led
  pinMode(12, OUTPUT);
}

#define MINPRESSURE 10
#define MAXPRESSURE 1000



void displayHvacUpdate(){
    tft.fillRect(190,120,50,20,BLACK);
    tft.setCursor(190,120); tft.setTextSize(2);
    tft.print("Off");
    tft.fillRect(190,150,50,20,BLACK);
    tft.setCursor(190,150); tft.setTextSize(2);
    tft.print("Heat");
    tft.fillRect(190,180,50,20,BLACK);
    tft.setCursor(190,180); tft.setTextSize(2);
    tft.print("AC");
    tft.fillRect(190,210,50,20,BLACK);
    tft.setCursor(190,210); tft.setTextSize(2);
    tft.print("Auto");
    displayHVAC = 0;
}

void loopSettingTime(){
  DateTime now = rtc.now();
  //hour
  tft.fillTriangle(50,30,30,70,70,70,RED);
  tft.setCursor(30,80); tft.setTextSize(4);
  tft.setTextColor(YELLOW);
  tft.fillRect(30,75,55,35,BLACK);
  tft.print(now.hour(), DEC);
  tft.fillTriangle(50,150,30,110,70,110,RED);
  //min
  tft.fillTriangle(150,30,130,70,170,70,RED);
  tft.setCursor(130,80); tft.setTextSize(4);
  tft.setTextColor(YELLOW);
  tft.fillRect(130,75,55,35,BLACK);
  tft.print(now.minute(), DEC);
  tft.fillTriangle(150,150,130,110,170,110,RED);
  prevHour = now.hour();
  prevMin = now.minute();

  tft.setCursor(150, 280);
  tft.fillRect(150, 270, 230, 50, RED);
  tft.setTextColor(YELLOW); tft.setTextSize(3);
  tft.print("Back>");
  
  while (settingTime){
    // need the next 5 lines for detecting the touch
    digitalWrite(13, HIGH);
    TSPoint p = ts.getPoint();
    digitalWrite(13, LOW);
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);
    if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
      
      // scale from 0->1023 to tft.width
      p.x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0);
      p.y = map(p.y, TS_MINY, TS_MAXY, tft.height(), 0);
  
      
      Serial.print("("); Serial.print(p.x);
      Serial.print(", "); Serial.print(p.y);
      Serial.println(")");
      //hour up
      if (p.x > 35 && p.x < 80 && p.y > 50 && p.y < 85) {
        prevHour = prevHour + 1;
        if(prevHour > 23){
          prevHour = 0;
        }
        delay(200);
        tft.setCursor(30,80); tft.setTextSize(4);
        tft.setTextColor(YELLOW);
        tft.fillRect(30,75,55,35,BLACK); 
        tft.print(prevHour);
      }
      //hour down
      else if (p.x > 35 && p.x < 80 && p.y > 125 && p.y < 165) {
        prevHour = prevHour - 1;
        if(prevHour < 0){
          prevHour = 23;
        }
        delay(200);
        tft.setCursor(30,80); tft.setTextSize(4);
        tft.setTextColor(YELLOW);
        tft.fillRect(30,75,55,35,BLACK); 
        tft.print(prevHour);
      }
      //min up 
      else if (p.x > 135 && p.x < 180 && p.y > 50 && p.y < 85) {
        prevMin = prevMin + 1;
        if (prevMin > 59){
          prevMin = 0;
        }
        delay(100);
        tft.setCursor(130,80); tft.setTextSize(4);
        tft.setTextColor(YELLOW);
        tft.fillRect(130,75,55,35,BLACK);
        tft.print(prevMin);
      }
      //min down
      else if (p.x > 135 && p.x < 180 && p.y > 125 && p.y < 165) {
        prevMin = prevMin - 1;
        if (prevMin < 0){
          prevMin = 59;
        }
        delay(100);
        tft.setCursor(130,80); tft.setTextSize(4);
        tft.setTextColor(YELLOW);
        tft.fillRect(130,75,55,35,BLACK);
        tft.print(prevMin);
      }

      //go back to main page
      else if (p.x > 150 && p.x < 240 && p.y > 280 && p.y < 340) {
        optionsMenu = 1;
        tft.fillScreen(BLACK);
        delay(500); 
        settingsPage = 1;
        settingTime = 0;
        return;
      }
    }
  }
}


void loopSettingMenu(){
  while (optionsMenu == 1){
    // need the next 5 lines for detecting the touch
    digitalWrite(13, HIGH);
    TSPoint p = ts.getPoint();
    digitalWrite(13, LOW);
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);

    if (settingsPage){
      tft.setCursor(0, 10);
      tft.fillRect(0, 0, 230, 50, RED);
      tft.setTextColor(YELLOW); tft.setTextSize(3);
      tft.print("Set time>");
  
      tft.setCursor(0, 70);
      tft.fillRect(0, 60, 230, 50, RED);
      tft.setTextColor(YELLOW); tft.setTextSize(3);
      tft.print("Set Week>");
  
      tft.setCursor(0, 130);
      tft.fillRect(0, 120, 230, 50, RED);
      tft.setTextColor(YELLOW); tft.setTextSize(3);
      tft.print("Set Weekend>");
  
      tft.setCursor(0, 280);
      tft.fillRect(0, 270, 230, 50, RED);
      tft.setTextColor(YELLOW); tft.setTextSize(3);
      tft.print("Back>");

      settingsPage = 0;
    }
    
    if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
      
      // scale from 0->1023 to tft.width
      p.x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0);
      p.y = map(p.y, TS_MINY, TS_MAXY, tft.height(), 0);
  
      
      Serial.print("("); Serial.print(p.x);
      Serial.print(", "); Serial.print(p.y);
      Serial.println(")");
      //set date
      if (p.x > 0 && p.x < 240 && p.y > 0 && p.y < 60) {
        tft.fillScreen(BLACK);
        loopSettingTime();
      }
      //set week hold
      else if (p.x > 0 && p.x < 240 && p.y > 70 && p.y < 120) {
        
      }
      //set weekend hold
      else if (p.x > 0 && p.x < 240 && p.y > 130 && p.y < 180) {
        
      }
      //go back to main page
      else if (p.x > 0 && p.x < 240 && p.y > 280 && p.y < 340) {
        optionsMenu = 0;
        displaySettings = 1;
        displayHVAC = 1;
        displaySetTemp = 1;
        showCurrTemp = 1;
        displayTime = 1;
        tft.fillScreen(BLACK);
        displaySetPoints = 1;
        delay(500);
        return;
      }
    }
  }
}

void viewPoints()
{
  
  while(1)
  {
    if (displayViewPoints)
    {
      tft.setCursor(20, 10);
      tft.setTextSize(2);
      tft.print("Set Point View");
      tft.setCursor(0,50);
      tft.setTextSize(2);
      tft.print("Weekday     Weekend");  
      tft.setCursor(110, 70);
      tft.setTextSize(1);
      tft.print("On/Off         On/Off");
      tft.setCursor(0, 90);
      tft.setTextSize(2);
      tft.print(tempWeekday1[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekday1[1]);
      tft.print(":");
      tft.print(tempWeekday1[2]);
      tft.setCursor(0, 140);
      tft.setTextSize(2);
      tft.print(tempWeekday2[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekday2[1]);
      tft.print(":");
      tft.print(tempWeekday2[2]);
      tft.setCursor(0, 190);
      tft.setTextSize(2);
      tft.print(tempWeekday3[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekday3[1]);
      tft.print(":");
      tft.print(tempWeekday3[2]);
      tft.setCursor(0, 240);
      tft.setTextSize(2);
      tft.print(tempWeekday4[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekday4[1]);
      tft.print(":");
      tft.print(tempWeekday4[2]);
      if (checkPoint1 == 1)
      {
         tft.fillRect(120, 90, 15, 15, GREEN);
      }
      else
      {
         tft.fillRect(120, 90, 15, 15, WHITE);
      }
      if (checkPoint2 == 1)
      {
         tft.fillRect(120, 140, 15, 15, GREEN);
      }
      else
      {
         tft.fillRect(120, 140, 15, 15, WHITE);
       }
       if (checkPoint3 == 1)
       {
         tft.fillRect(120, 190, 15, 15, GREEN);
       }
       else
       {
          tft.fillRect(120, 190, 15, 15, WHITE);
       }
      if (checkPoint4 == 1)
      {
      tft.fillRect(120, 240, 15, 15, GREEN);
      }
      else
      {
         tft.fillRect(120, 240, 15, 15, WHITE);
      }
      tft.setCursor(110, 115);
      tft.setTextSize(1);
      tft.setTextSize(2);
      tft.print(tempWeekend1[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekend1[1]);
      tft.print(":");
      tft.print(tempWeekend1[2]);
      tft.setCursor(110, 165);
      tft.setTextSize(1);
       tft.setTextSize(2);
      tft.print(tempWeekend2[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekend2[1]);
      tft.print(":");
      tft.print(tempWeekend2[2]);
      tft.setCursor(110, 215);
      tft.setTextSize(1);
       tft.setTextSize(2);
      tft.print(tempWeekend3[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekend3[1]);
      tft.print(":");
      tft.print(tempWeekend3[2]);
      tft.setCursor(110, 265);
      tft.setTextSize(1);
       tft.setTextSize(2);
      tft.print(tempWeekend4[0]);
      tft.setTextSize(1);
      tft.print("o");
      tft.setTextSize(2);
      tft.print("F");
      tft.setTextSize(1);
      tft.print(" ");
      tft.setTextSize(2);
      tft.print(tempWeekend4[1]);
      tft.print(":");
      tft.print(tempWeekend4[2]);
      if (checkPoint5 == 1)
      {
          tft.fillRect(220, 115, 15, 15, GREEN);
      }
      else
      {

          tft.fillRect(220, 115, 15, 15, WHITE);
      }
      if (checkPoint6 == 1)
      {
          tft.fillRect(220, 165, 15, 15, GREEN);
      }
      else
      {
          tft.fillRect(220, 165, 15, 15, WHITE);
      }
      if (checkPoint7 == 1)
      {
          tft.fillRect(220, 215, 15, 15, GREEN);
      }
      else
      {
          tft.fillRect(220, 215, 15, 15, WHITE);
      }
      if (checkPoint8 == 1)
      {
          tft.fillRect(220, 265, 15, 15, GREEN);
      }
      else
      {
          tft.fillRect(220, 265, 15, 15, WHITE);
      }
      tft.setTextSize(4);
      tft.setCursor(0, 290);
      tft.print("Back>");
      displayViewPoints = 0;
    }
    DateTime now = rtc.now();
    // need the next 5 lines for detecting the touch
    digitalWrite(13, HIGH);
    TSPoint p = ts.getPoint();
    digitalWrite(13, LOW);
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);

    if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
    
      // scale from 0->1023 to tft.width
      p.x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0);
      p.y = map(p.y, TS_MINY, TS_MAXY, tft.height(), 0);
  
      
      Serial.print("("); Serial.print(p.x);
      Serial.print(", "); Serial.print(p.y);
      Serial.println(")");

      //Weekday 1
      if (p.x > 10 && p.x < 105 && p.y > 100 && p.y < 130) {
        tft.fillScreen(BLACK);
        setTimePoint(1);
      }
      //Weekday 2
      else if (p.x > 10 && p.x < 105 && p.y > 150 && p.y < 180) {
        tft.fillScreen(BLACK);
        setTimePoint(2);
      }
      //Weekday 3
      else if (p.x > 10 && p.x < 105 && p.y > 200 && p.y < 230) {
        tft.fillScreen(BLACK);
        setTimePoint(3);
      }
      //Weekday 4
      else if (p.x > 10 && p.x < 105 && p.y > 250 && p.y < 280) {
        tft.fillScreen(BLACK);
        setTimePoint(4);
      }
      //Weekend 1
      else if (p.x > 120 && p.x < 220 && p.y > 125 && p.y < 145) {
        tft.fillScreen(BLACK);
        setTimePoint(5);
      }
      //Weekend 2
      else if (p.x > 120 && p.x < 220 && p.y > 175 && p.y < 195) {
        tft.fillScreen(BLACK);
        setTimePoint(6);
      }
      //Weekend 3
      else if (p.x > 120 && p.x < 220 && p.y > 225 && p.y < 245) {
        tft.fillScreen(BLACK);
        setTimePoint(7);
      }
      //Weekend 4
      else if (p.x > 120 && p.x < 220 && p.y > 275 && p.y < 295) {
        tft.fillScreen(BLACK);
        setTimePoint(8);
      }
      //Box 1
      else if (p.x > 125 && p.x < 145 && p.y > 100 && p.y < 120) {
        if (checkPoint1 == 0)
        {
          checkPoint1 = 1;
          tft.fillRect(120, 90, 15, 15, GREEN);
        }
        else
        {
          checkPoint1 = 0;
          tft.fillRect(120, 90, 15, 15, WHITE);
        }
        delay(750);
      }
      //Box 2
      else if (p.x > 125 && p.x < 145 && p.y > 150 && p.y < 170) {
        if (checkPoint2 == 0)
        {
          checkPoint2 = 1;
          tft.fillRect(120, 140, 15, 15, GREEN);
        }
        else
        {
          checkPoint2 = 0;
          tft.fillRect(120, 140, 15, 15, WHITE);
        }
        delay(750);
      }
      //Box 3
      else if (p.x > 125 && p.x < 145 && p.y > 200 && p.y < 220) {
        if (checkPoint3 == 0)
        {
          checkPoint3 = 1;
          tft.fillRect(120, 190, 15, 15, GREEN);
        }
        else
        {
          checkPoint3 = 0;
          tft.fillRect(120, 190, 15, 15, WHITE);
        }
        delay(750);
      }
      //Box 4
      else if (p.x > 125 && p.x < 145 && p.y > 250 && p.y < 270) {
         if (checkPoint4 == 0)
        {
          checkPoint4 = 1;
          tft.fillRect(120, 240, 15, 15, GREEN);
        }
        else
        {
          checkPoint4 = 0;
          tft.fillRect(120, 240, 15, 15, WHITE);
        }
        delay(750);
      }
      //Box 5
      else if (p.x > 225 && p.x < 245 && p.y > 130 && p.y < 150) {
        if (checkPoint5 == 0)
        {
          checkPoint5 = 1;
          tft.fillRect(220, 115, 15, 15, GREEN);
        }
        else
        {
          checkPoint5 = 0;
          tft.fillRect(220, 115, 15, 15, WHITE);
        }
        delay(750);
      }
      //Box 6
      else if (p.x > 225 && p.x < 245 && p.y > 180 && p.y < 200) {
        if (checkPoint6 == 0)
        {
          checkPoint6 = 1;
          tft.fillRect(220, 165, 15, 15, GREEN);
        }
        else
        {
          checkPoint6 = 0;
          tft.fillRect(220, 165, 15, 15, WHITE);
        }
        delay(750);  
      }
      //Box 7
      else if (p.x > 225 && p.x < 245 && p.y > 230 && p.y < 250) {
        if (checkPoint7 == 0)
        {
          checkPoint7 = 1;
          tft.fillRect(220, 215, 15, 15, GREEN);
        }
        else
        {
          checkPoint7 = 0;
          tft.fillRect(220, 215, 15, 15, WHITE);
        }
        delay(750); 
      }
      //Box 8
      else if (p.x > 225 && p.x < 245 && p.y > 280 && p.y < 300) {
        if (checkPoint8 == 0)
        {
          checkPoint8 = 1;
          tft.fillRect(220, 265, 15, 15, GREEN);
        }
        else
        {
          checkPoint8 = 0;
          tft.fillRect(220, 265, 15, 15, WHITE);
        }
        delay(750);  
      }
      //Back
      else if (p.x > 0 && p.x < 95 && p.y > 290 && p.y < 325) {
        optionsMenu = 0;
        displaySettings = 1;
        displayHVAC = 1;
        displaySetTemp = 1;
        showCurrTemp = 1;
        displayTime = 1;
        tft.fillScreen(BLACK);
        displaySetPoints = 1;
        delay(500);
        return;
      }
    }
    
  }
}

void setTimePoint(int i)
{
  tft.setTextColor(YELLOW);
  tft.setTextSize(3);
  tft.setCursor(0, 0);
  if (i < 5)
  {
    tft.print("Set Weekday");
    tft.print(i);
  }
  else
  {
    tft.print("Set Weekend");
    tft.print(i-4);
  }
  tft.setTextSize(4);
  tft.setCursor(0, 290);
  tft.print("Back>");
  
  while (1)
  {
    DateTime now = rtc.now();
    // need the next 5 lines for detecting the touch
    digitalWrite(13, HIGH);
    TSPoint p = ts.getPoint();
    digitalWrite(13, LOW);
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);

    if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
    
      // scale from 0->1023 to tft.width
      p.x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0);
      p.y = map(p.y, TS_MINY, TS_MAXY, tft.height(), 0);
  
      
      Serial.print("("); Serial.print(p.x);
      Serial.print(", "); Serial.print(p.y);
      Serial.println(")");
      //Back
      if (p.x > 0 && p.x < 95 && p.y > 290 && p.y < 325) {
        tft.fillScreen(BLACK);
        delay(500);
        displayViewPoints = 1;
        return;
      }
    }
  }
}

void loop() {
  DateTime now = rtc.now();
  // need the next 5 lines for detecting the touch
  digitalWrite(13, HIGH);
  TSPoint p = ts.getPoint();
  digitalWrite(13, LOW);
  pinMode(XM, OUTPUT);
  pinMode(YP, OUTPUT);

  

  
  // put your main code here, to run repeatedly:
  // Send the command to get temperatures
  sensors.requestTemperatures(); 

  float temperatureC = sensors.getTempCByIndex(0);
  float temperatureF = sensors.getTempFByIndex(0);

  // blue cooling led on and red off
  // REPLACE 72 WITH USER SET VARIABLE AND -1
  //  example: if (temperatureF < setByUser - 1) {
  if ((temperatureF > setCurrentTemp +1) && (currentHVAC == 2 || currentHVAC == 3) ){
    digitalWrite(11, HIGH);
    digitalWrite(12, LOW);
    tft.fillCircle(205, 255, 15, BLUE);
  }
  // red (heating) lad on and blue off
  // REPLACE 71 WITH USER SET VARIABLE AND +1
  else if( temperatureF < setCurrentTemp && (currentHVAC == 1 || currentHVAC == 3)){
    digitalWrite(12, HIGH);
    digitalWrite(11, LOW); 
    tft.fillCircle(205, 255, 15, RED);
  }
  // if exactly the set temp then both leds are off
  else{
    digitalWrite(12, LOW);
    digitalWrite(11, LOW);
    tft.fillCircle(205, 255, 15, BLACK);
  }

  if (showCurrTemp){
    tft.setCursor(0, 5);
    tft.fillRect(0, 0, 200, 50, RED);
    tft.setTextColor(YELLOW); tft.setTextSize(6);
    tft.print((int)temperatureF);
    tft.setTextSize(2);
    tft.print(" o");
    tft.setTextSize(6);
    tft.print("F");
    showCurrTemp = 0;
  }
  
  if (temperatureFLast != (int)temperatureF){
    temperatureFLast = temperatureF;
    tft.setCursor(0, 5);
    tft.fillRect(0, 0, 200, 50, RED);
    tft.setTextColor(YELLOW); tft.setTextSize(6);
    tft.print((int)temperatureF);
    //tft.print((char)248);
    tft.setTextSize(2);
    tft.print(" o");
    tft.setTextSize(6);
    tft.print("F");
  }

  
  tft.fillTriangle(30, 310, 15, 265, 45, 265, BLUE);

  tft.fillTriangle(30, 180, 15, 225, 45, 225, RED);
  
  //settings
  if (displaySettings){
    tft.fillRect(140, 280, 100, 40, BLACK);
    tft.setCursor(140,280); tft.setTextSize(2);
    tft.print("Settings");
    displaySettings = 0;
    
  }

  if( displayHVAC){
    displayHvacUpdate();
    
    if(currentHVAC == 0){
      tft.fillRect(190,120,50,20,WHITE);
      tft.setTextColor(BLACK);
      tft.setCursor(190,120); tft.setTextSize(2);
      tft.print("Off");
      tft.setTextColor(YELLOW);
    }
    else if( currentHVAC == 1){
      tft.fillRect(190,150,50,20,RED);
      tft.setCursor(190,150); tft.setTextSize(2);
      tft.print("Heat");
    }
    else if (currentHVAC == 2){
      tft.fillRect(190,180,50,20,BLUE);
      tft.setCursor(190,180); tft.setTextSize(2);
      tft.print("AC");
    }
    else if (currentHVAC == 3){
      tft.fillRect(190,210,50,20,WHITE);
      tft.setTextColor(BLACK);
      tft.setCursor(190,210); tft.setTextSize(2);
      tft.print("Auto");
      tft.setTextColor(YELLOW);
    }
    
  }

  if (displaySetTemp){
    tft.fillRect(10, 230, 50, 30, BLACK);
    tft.setCursor(10,230); tft.setTextSize(4);
    tft.print(setCurrentTemp);
    //tft.fillRect(25, 210, 50, 35, RED);
    //tft.setCursor(25,210); tft.setTextSize(4);
    //tft.print(setCurrentTemp);
    displaySetTemp = 0;
  }
  
  
  if (displayTime){
    //dat
    tft.setCursor(10, 75);
    tft.fillRect(0, 70, 150, 35, RED);
    tft.setTextSize(3);
    tft.print(daysOfTheWeek[now.dayOfTheWeek()]);
    tft.setCursor(10, 110);
    tft.fillRect(0, 110, 150, 35, RED);
    tft.print(now.hour(), DEC);
    tft.print(':');
    tft.print(now.minute(), DEC);
    prevHour = now.hour();
    prevMin = now.minute();
    displayTime = 0;
  }

  if (prevHour != now.hour() || prevMin != now.minute()){
    tft.setCursor(10, 75);
    tft.fillRect(0, 70, 150, 35, RED);
    tft.setTextSize(3);
    tft.print(daysOfTheWeek[now.dayOfTheWeek()]);
    tft.setCursor(10, 110);
    tft.fillRect(0, 110, 150, 35, RED);
    tft.print(now.hour(), DEC);
    tft.print(':');
    tft.print(now.minute(), DEC);
    prevHour = now.hour();
    prevMin = now.minute();
  
  }

  if (displaySetPoints)
  {    
    tft.fillRect(70, 170, 100, 90, WHITE);
    tft.setCursor(84, 175);
    tft.fillRect(72, 172, 96, 86, BLACK);
    tft.setTextSize(2);
    tft.print("View");
    tft.setCursor(80, 200);
    tft.print("Points");
    displaySetPoints = 0;
  }
  
  // we have some minimum pressure we consider 'valid'
  // pressure of 0 means no pressing!

  // this is when the screen is touched anywhere 
  if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
    
    // scale from 0->1023 to tft.width
    p.x = map(p.x, TS_MINX, TS_MAXX, tft.width(), 0);
    p.y = map(p.y, TS_MINY, TS_MAXY, tft.height(), 0);

    
    Serial.print("("); Serial.print(p.x);
    Serial.print(", "); Serial.print(p.y);
    Serial.println(")");
    //tft.fillScreen(BLACK);
    //unsigned long start = micros();
    //set temp up
    if (p.x > 15 && p.x < 55 && p.y > 200 && p.y < 240) {
      setCurrentTemp = setCurrentTemp + 1;
      displaySetTemp  = 1;
      if (setCurrentTemp > 95){
        setCurrentTemp = 95;
      }
    }
    //set temp down
    else if (p.x > 15 && p.x < 55 && p.y > 280 && p.y < 325) {
      setCurrentTemp = setCurrentTemp - 1 ;
      displaySetTemp = 1;
      if (setCurrentTemp < 60){
        setCurrentTemp = 60;
      }
    }
    //off
    else if (p.x > 200 && p.x < 250 && p.y > 130 && p.y < 150){
      currentHVAC = 0;
      displayHvacUpdate();
      tft.fillRect(190,120,50,20,WHITE);
      tft.setTextColor(BLACK);
      tft.setCursor(190,120); tft.setTextSize(2);
      tft.print("Off");
      tft.setTextColor(YELLOW);
    }
    //heat
    else if (p.x > 200 && p.x < 250 && p.y > 160 && p.y < 180){
      currentHVAC = 1;
      displayHvacUpdate();
      tft.fillRect(190,150,50,20,RED);
      tft.setCursor(190,150); tft.setTextSize(2);
      tft.print("Heat");
    }
    //ac
    else if (p.x > 200 && p.x < 250 && p.y > 190 && p.y < 210){
      currentHVAC = 2;
      displayHvacUpdate();
      tft.fillRect(190,180,50,20,BLUE);
      tft.setCursor(190,180); tft.setTextSize(2);
      tft.print("AC");
    }
    //auto
    else if (p.x > 200 && p.x < 250 && p.y > 220 && p.y < 240){
      currentHVAC = 3;
      displayHvacUpdate();
      tft.fillRect(190,210,50,20,WHITE);
      tft.setTextColor(BLACK);
      tft.setCursor(190,210); tft.setTextSize(2);
      tft.print("Auto");
      tft.setTextColor(YELLOW);
    }
    else if (p.x > 150 && p.x < 250 && p.y > 300 && p.y < 330){
      tft.fillScreen(BLACK);
      optionsMenu = 1;
      settingsPage = 1;
      delay(500);
      loopSettingMenu();
      
    }
    else if (p.x > 75 && p.x < 175 && p.y > 185 && p.y < 275){
      displayViewPoints = 1;
      tft.fillScreen(BLACK);
      viewPoints();
    }
    
  }
}
